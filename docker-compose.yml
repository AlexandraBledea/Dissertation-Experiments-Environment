services:
  kafka-consumer:
    image: kafka-consumer:latest
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./kafka-consumer
    environment:
      - APPLICATION_PORT=8020
      - KAFKA_SERVER=kafka
      - KAFKA_PORT=9092
    ports:
      - "8020:8020"
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./logs/kafka-consumer/:/var/log/kafka-consumer

  rabbitmq-consumer:
    image: rabbitmq-consumer:latest
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./rabbitmq-consumer
    environment:
      - APPLICATION_PORT=8030
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672
    ports:
      - "8030:8030"
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./logs/rabbitmq-consumer/:/var/log/rabbitmq-consumer

  redis-consumer:
    image: redis-consumer:latest
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./redis-consumer
    environment:
      - APPLICATION_PORT=8030
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8040:8040"
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs/redis-consumer/:/var/log/redis-consumer

  producer:
    image: producer:latest
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./producer
    environment:
      - APPLICATION_PORT=8050
      - KAFKA_SERVER=kafka
      - KAFKA_PORT=9092
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8050:8050"
    deploy:
      mode: replicated
      replicas: 1
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./logs/producer/:/var/log/producer

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - "./rabbit-data:/var/lib/rabbitmq/mnesia/"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:5.1.0
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 30000
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 30000
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.request.logger=WARN"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_CREATE_TOPICS: "log-message:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    hostname: kafka
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9092 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
